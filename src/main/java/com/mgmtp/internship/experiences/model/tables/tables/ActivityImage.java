/*
 * This file is generated by jOOQ.
 */
package com.mgmtp.internship.experiences.model.tables.tables;


import com.mgmtp.internship.experiences.model.tables.Keys;
import com.mgmtp.internship.experiences.model.tables.Public;
import com.mgmtp.internship.experiences.model.tables.tables.records.ActivityImageRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * activity image table
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActivityImage extends TableImpl<ActivityImageRecord> {

    private static final long serialVersionUID = -1921973105;

    /**
     * The reference instance of <code>public.activity_image</code>
     */
    public static final ActivityImage ACTIVITY_IMAGE = new ActivityImage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivityImageRecord> getRecordType() {
        return ActivityImageRecord.class;
    }

    /**
     * The column <code>public.activity_image.activity_id</code>.
     */
    public final TableField<ActivityImageRecord, Long> ACTIVITY_ID = createField("activity_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.activity_image.image_id</code>.
     */
    public final TableField<ActivityImageRecord, Long> IMAGE_ID = createField("image_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.activity_image.id</code>.
     */
    public final TableField<ActivityImageRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('activity_image_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>public.activity_image</code> table reference
     */
    public ActivityImage() {
        this(DSL.name("activity_image"), null);
    }

    /**
     * Create an aliased <code>public.activity_image</code> table reference
     */
    public ActivityImage(String alias) {
        this(DSL.name(alias), ACTIVITY_IMAGE);
    }

    /**
     * Create an aliased <code>public.activity_image</code> table reference
     */
    public ActivityImage(Name alias) {
        this(alias, ACTIVITY_IMAGE);
    }

    private ActivityImage(Name alias, Table<ActivityImageRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActivityImage(Name alias, Table<ActivityImageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("activity image table"));
    }

    public <O extends Record> ActivityImage(Table<O> child, ForeignKey<O, ActivityImageRecord> key) {
        super(child, key, ACTIVITY_IMAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ActivityImageRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACTIVITY_IMAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ActivityImageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ActivityImageRecord, ?>>asList(Keys.ACTIVITY_IMAGE__FK_ACTIVITY_IMAGE_ACTIVITY, Keys.ACTIVITY_IMAGE__FK_ACTIVITY_IMAGE_IMAGE);
    }

    public Activity activity() {
        return new Activity(this, Keys.ACTIVITY_IMAGE__FK_ACTIVITY_IMAGE_ACTIVITY);
    }

    public Image image() {
        return new Image(this, Keys.ACTIVITY_IMAGE__FK_ACTIVITY_IMAGE_IMAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ActivityImage as(String alias) {
        return new ActivityImage(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ActivityImage as(Name alias) {
        return new ActivityImage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivityImage rename(String name) {
        return new ActivityImage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivityImage rename(Name name) {
        return new ActivityImage(name, null);
    }
}
