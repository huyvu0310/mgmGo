/*
 * This file is generated by jOOQ.
 */
package com.mgmtp.internship.experiences.model.tables.tables;


import com.mgmtp.internship.experiences.model.tables.Keys;
import com.mgmtp.internship.experiences.model.tables.Public;
import com.mgmtp.internship.experiences.model.tables.tables.records.FavoriteRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * favorite table
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Favorite extends TableImpl<FavoriteRecord> {

    private static final long serialVersionUID = -1082028621;

    /**
     * The reference instance of <code>public.favorite</code>
     */
    public static final Favorite FAVORITE = new Favorite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FavoriteRecord> getRecordType() {
        return FavoriteRecord.class;
    }

    /**
     * The column <code>public.favorite.activity_id</code>.
     */
    public final TableField<FavoriteRecord, Long> ACTIVITY_ID = createField("activity_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.favorite.user_id</code>.
     */
    public final TableField<FavoriteRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.favorite</code> table reference
     */
    public Favorite() {
        this(DSL.name("favorite"), null);
    }

    /**
     * Create an aliased <code>public.favorite</code> table reference
     */
    public Favorite(String alias) {
        this(DSL.name(alias), FAVORITE);
    }

    /**
     * Create an aliased <code>public.favorite</code> table reference
     */
    public Favorite(Name alias) {
        this(alias, FAVORITE);
    }

    private Favorite(Name alias, Table<FavoriteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Favorite(Name alias, Table<FavoriteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("favorite table"));
    }

    public <O extends Record> Favorite(Table<O> child, ForeignKey<O, FavoriteRecord> key) {
        super(child, key, FAVORITE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FavoriteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FavoriteRecord, ?>>asList(Keys.FAVORITE__FK_FAVORITE_ACTIVITY, Keys.FAVORITE__FK_FAVORITE_USER);
    }

    public Activity activity() {
        return new Activity(this, Keys.FAVORITE__FK_FAVORITE_ACTIVITY);
    }

    public User user() {
        return new User(this, Keys.FAVORITE__FK_FAVORITE_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Favorite as(String alias) {
        return new Favorite(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Favorite as(Name alias) {
        return new Favorite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Favorite rename(String name) {
        return new Favorite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Favorite rename(Name name) {
        return new Favorite(name, null);
    }
}
